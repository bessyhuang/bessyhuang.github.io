<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Data Visualization - Advanced</title>
    <url>/2023/08/12/Data-Visualization-Advanced/</url>
    <content><![CDATA[<h1 id="Common-Data-Visualization-Mistakes"><a href="#Common-Data-Visualization-Mistakes" class="headerlink" title="Common Data Visualization Mistakes"></a>Common Data Visualization Mistakes</h1><h2 id="1-Misleading-color-contrast"><a href="#1-Misleading-color-contrast" class="headerlink" title="1. Misleading color contrast"></a>1. Misleading color contrast</h2><p>Although using various colors aids in interpreting data visualizations, too much color can confuse the user.<br>It’s crucial to stick to a limited number of unique colors.<br><img src="https://miro.medium.com/v2/resize:fit:1400/0*jl2BBj1gHt3qoTXU" alt="Bad Example: Misleading color contrast"></p>
<ul>
<li>Solution<ul>
<li>The simplest way to determine contrast value is to compare contrast colors on greyscale to check if the color you choose displays the difference.<br><img src="https://miro.medium.com/v2/resize:fit:1400/0*M_5cpWpvfNJzVsqQ"></li>
</ul>
</li>
</ul>
<h2 id="2-Overwhelming-charts-with-too-much-data"><a href="#2-Overwhelming-charts-with-too-much-data" class="headerlink" title="2. Overwhelming charts with too much data"></a>2. Overwhelming charts with too much data</h2><p><img src="https://miro.medium.com/v2/resize:fit:1400/0*wzDTQBW8wYIev4GC" alt="Bad Example: Overwhelming charts with too much data"></p>
<ul>
<li>Solution<ul>
<li>Do not put all of your insights into a chart. Multiple visualizations can help you communicate data more effectively.</li>
<li>It is recommended that no more than 5–6 colors be used in a single visualization.</li>
</ul>
</li>
</ul>
<h2 id="3-Omitting-baseline-and-truncating-scale"><a href="#3-Omitting-baseline-and-truncating-scale" class="headerlink" title="3. Omitting baseline and truncating scale"></a>3. Omitting baseline and truncating scale</h2><img src="/2023/08/12/Data-Visualization-Advanced/Omitting_baseline_and_truncating_scale.jpg" class="" title="Bad Example: Omitting baseline and truncating scale">

<ul>
<li>Solution<ul>
<li>Concentrate on creating data visualizations with a zero-baseline y-axis.</li>
<li>If removing the zero makes sense, add a zero-break to communicate that.<img src="/2023/08/12/Data-Visualization-Advanced/solution_Omitting_baseline_and_truncating_scale.jpg" class=""></li>
</ul>
</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://flourish.studio/blog/common-mistakes-in-data-visualization/">Four data visualization mistakes you’re probably making and how to fix them</a></li>
<li><a href="https://www.toptal.com/designers/ux/data-visualization-mistakes">Numbers Shouldn’t Lie: An Overview of Common Data Visualization Mistakes</a></li>
<li><a href="https://chartio.com/learn/charts/how-to-choose-data-visualization/">How to Choose the Right Data Visualization</a></li>
<li><a href="https://careerfoundry.com/en/tutorials/data-analytics-for-beginners/introduction-to-data-visualization/">Tutorial 4: An Introduction to Data Visualization</a></li>
</ol>
]]></content>
      <tags>
        <tag>Data Visualization</tag>
        <tag>Common Mistakes</tag>
      </tags>
  </entry>
  <entry>
    <title>Amazon S3</title>
    <url>/2023/10/02/Amazon-S3/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><em><font color=royalblue>Infinitely Scaling Storage</font></em></p>
<h1 id="Amazon-S3-Components"><a href="#Amazon-S3-Components" class="headerlink" title="Amazon S3 - Components"></a>Amazon S3 - Components</h1><p>Amazon S3 allows people to store objects (files) in buckets (directories).</p>
<h2 id="Buckets"><a href="#Buckets" class="headerlink" title="Buckets"></a>Buckets</h2><p><em><font color=red>S3 looks like a global service but buckets are created in a region</font></em></p>
<ul>
<li>Buckets must have a globally unique name (across all regions all accounts)</li>
<li>Buckets are defined at the region level</li>
<li>Name Convention<ul>
<li>No uppercase, No underscore</li>
<li>3-63 characters long</li>
<li>Not an IP</li>
<li>Must start with lowercase letter or number</li>
<li>Must NOT start with the prefix <code>xn--</code></li>
<li>Must NOT end with the suffix <code>-s3alias</code></li>
</ul>
</li>
</ul>
<h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><p><em><font color=red>Objects (files) have a Key. Key with very long names that contain slashes (“&#x2F;“).</font></em><br><em><font color=red>There is no concept of “directories” within buckets</font></em></p>
<ul>
<li>The key is the FULL path:<ul>
<li>s3:&#x2F;&#x2F;my-bucket&#x2F;my_folder&#x2F;another_folder&#x2F;my_file.txt</li>
</ul>
</li>
<li>The key is composed of <font color=red>prefix</font> + <font color=green>object name</font><ul>
<li>s3:&#x2F;&#x2F;my-bucket&#x2F;<font color=red>my_folder&#x2F;another_folder&#x2F;</font><font color=green>my_file.txt</font></li>
</ul>
</li>
<li>Object values are the content of the body:<ul>
<li>Max. Object Size is 5 TB (5000 GB)</li>
<li>If uploading more than 5 GB, must use “multi-part upload”.</li>
</ul>
</li>
<li>Metadata<ul>
<li>List of text key&#x2F;value pairs</li>
<li>System or user metadata</li>
</ul>
</li>
<li>Tags<ul>
<li>Unicode key&#x2F;value pair</li>
<li>Up to 10</li>
<li>Useful for security&#x2F;lifecycle</li>
</ul>
</li>
<li>Version ID<ul>
<li>If versioning is enabled</li>
</ul>
</li>
</ul>
<h1 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h1><ul>
<li>Backup &amp; Storage</li>
<li>Disaster Recovery</li>
<li>Archive</li>
<li>Hybrid Cloud Storage</li>
<li>Application&#x2F;Media Hosting</li>
<li>Data Lakes &amp; Big Data Analytics</li>
<li>Software Delivery</li>
<li>Static Website</li>
</ul>
<h2 id="Business-Use-Cases"><a href="#Business-Use-Cases" class="headerlink" title="Business Use Cases"></a>Business Use Cases</h2><ul>
<li>Nasdaq stores 7 years of data into Glacier</li>
<li>Sysco runs analytics on its data and gain business insights</li>
</ul>
<h1 id="Limitations"><a href="#Limitations" class="headerlink" title="Limitations"></a>Limitations</h1>]]></content>
      <tags>
        <tag>S3</tag>
        <tag>★☆★</tag>
      </tags>
  </entry>
  <entry>
    <title>Django</title>
    <url>/2023/08/16/Django/</url>
    <content><![CDATA[<blockquote>
<p><em>“Django makes it easier to build better web apps more quickly and with less code.” — Django Official Website</em></p>
</blockquote>
<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>Django is a high-level Python web framework that encourages rapid development and clean, pragmatic design. It’s free and open source.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1>]]></content>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes | Cluster Architecture</title>
    <url>/2024/04/16/Kubernetes-Cluster-Architecture/</url>
    <content><![CDATA[<h1 id="Kubernetes-Cluster-Architecture"><a href="#Kubernetes-Cluster-Architecture" class="headerlink" title="Kubernetes Cluster Architecture"></a>Kubernetes Cluster Architecture</h1><p>Kubernetes cluster architecture<br><img src="https://kubernetes.io/images/docs/kubernetes-cluster-architecture.svg"></p>
<h1 id="Kubernetes-Components"><a href="#Kubernetes-Components" class="headerlink" title="Kubernetes Components"></a>Kubernetes Components</h1><p>The components of a Kubernetes cluster<br><img src="https://kubernetes.io/images/docs/components-of-kubernetes.svg"></p>
<h2 id="【-Master-】"><a href="#【-Master-】" class="headerlink" title="【 Master 】"></a><font color=LightCoral>【 Master 】</font></h2><blockquote>
<p>aka. 【 Control Plane Components 】</p>
</blockquote>
<p><font color=LightCoral>Purpose: Manage, Plan, Schedule, Monitor Nodes</font></p>
<h3 id="kube-apiserver"><a href="#kube-apiserver" class="headerlink" title="kube-apiserver"></a>kube-apiserver</h3><p>Also known as: API server</p>
<p>The API server is a component of the Kubernetes control plane that exposes the Kubernetes API. The API server is the front end for the Kubernetes control plane.</p>
<h3 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h3><p>Consistent and highly-available key value store used as Kubernetes’ backing store for all cluster data.</p>
<h3 id="kube-scheduler"><a href="#kube-scheduler" class="headerlink" title="kube-scheduler"></a>kube-scheduler</h3><p>Control plane component that watches for newly created Pods with no assigned node, and selects a node for them to run on.</p>
<p>Factors taken into account for scheduling decisions include: individual and collective resource requirements, hardware&#x2F;software&#x2F;policy constraints, affinity and anti-affinity specifications, data locality, inter-workload interference, and deadlines.</p>
<h3 id="kube-controller-manager"><a href="#kube-controller-manager" class="headerlink" title="kube-controller-manager"></a>kube-controller-manager</h3><p>Control plane component that runs controller processes.</p>
<p>There are many different types of controllers. (e.g. Node controller, Job controller, EndpointSlice controller, ServiceAccount controller …)</p>
<h2 id="【-Worker-Nodes-】"><a href="#【-Worker-Nodes-】" class="headerlink" title="【 Worker Nodes 】"></a><font color=LightCoral>【 Worker Nodes 】</font></h2><blockquote>
<p>aka. 【 Node Components 】</p>
</blockquote>
<p><font color=LightCoral>Purpose: Host Application as Containers</font></p>
<h3 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h3><p>An agent that runs on each node in the cluster. It makes sure that containers are running (and healthy) in a Pod.</p>
<h3 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h3><p>kube-proxy is a network proxy that runs on each node in your cluster, implementing part of the Kubernetes Service concept.</p>
<p>kube-proxy maintains network rules on nodes. These network rules allow network communication to your Pods from network sessions inside or outside of your cluster.</p>
<h3 id="Container-runtime"><a href="#Container-runtime" class="headerlink" title="Container runtime"></a>Container runtime</h3><p>A fundamental component that empowers Kubernetes to run containers effectively. It is responsible for managing the execution and lifecycle of containers within the Kubernetes environment.</p>
<p>Kubernetes supports container runtimes such as containerd, CRI-O, and any other implementation of the Kubernetes CRI (Container Runtime Interface).</p>
<hr>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://kubernetes.io/docs/concepts/architecture/">Cluster Architecture</a></li>
<li><a href="https://kubernetes.io/docs/concepts/overview/components/">Kubernetes Components</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Concepts</tag>
        <tag>觀念解說</tag>
      </tags>
  </entry>
  <entry>
    <title>MQTT vs. Redis vs. Kafka</title>
    <url>/2024/03/18/MQTT-vs-Redis-vs-Kafka/</url>
    <content><![CDATA[<h1 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h1><blockquote>
<p>Message Queueing Telemetry Transport</p>
</blockquote>
<p>It is a lightweight communication protocol for IoT devices and networks. MQTT is well-suited for use in low-bandwidth, high-latency networks, and is often used for real-time data transfer in applications such as home automation and energy management.</p>
<p>MQTT (Message Queuing Telemetry Transport) is a publish&#x2F;subscribe messaging protocol designed for resource-constrained devices and low-bandwidth networks. It provides a lightweight and efficient messaging infrastructure for microservices, making it ideal for IoT and mobile applications.</p>
<ul>
<li>物聯網(IoT) 通訊協議，專為資源受限的設備設計，提供了可靠的、有序的、低延遲的訊息傳輸</li>
<li>適用於物聯網設備間的訊息通訊</li>
</ul>
<h2 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages"></a>Advantages</h2><ol>
<li>Lightweight and efficient</li>
<li>Ideal for IoT and mobile applications</li>
<li>Publish&#x2F;subscribe model for easy scalability</li>
<li>Widely supported and well-documented API</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Quality of Service (QoS)</span><br><span class="line">Retained Messages</span><br><span class="line">Last Will and Testament (LWT)</span><br><span class="line"></span><br><span class="line">Scalability and Reliability</span><br></pre></td></tr></table></figure>

<h2 id="Disadvantages"><a href="#Disadvantages" class="headerlink" title="Disadvantages"></a>Disadvantages</h2><ol>
<li>Limited security options compared to other protocols</li>
<li>May not be suitable for high-volume or complex data transfers</li>
</ol>
<h2 id="Best-Use-Case"><a href="#Best-Use-Case" class="headerlink" title="Best Use Case"></a>Best Use Case</h2><p>MQTT is best for low-volume, resource-constrained, and scalable communication between microservices, especially in IoT and mobile applications.<br>It’s well-suited for environments with limited bandwidth or unreliable networks, and devices with low computational resources.</p>
<p>Choose: You need to ensure message delivery over unreliable or bandwidth-constrained networks. You are dealing with a large number of distributed devices or sensors.</p>
<hr>
<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><blockquote>
<p>Remote Dictionary Server</p>
</blockquote>
<p>It is an in-memory data structure store that can be used as a database, cache, and message broker. Redis can be used for real-time communication between services, where messages are stored and retrieved using Redis pub&#x2F;sub.</p>
<p>Redis is an open-source, in-memory data structure store that can be used as a database, cache, and message broker. It provides fast and flexible access to data, making it well-suited for use as a cache and message broker in microservices.</p>
<ul>
<li>適用於需要高效能、在短時間內處理大量訊息的場景</li>
</ul>
<h2 id="Advantages-1"><a href="#Advantages-1" class="headerlink" title="Advantages"></a>Advantages</h2><ol>
<li>Fast in-memory access to data</li>
<li>Flexible data storage options</li>
<li>Publish&#x2F;subscribe model for easy scalability</li>
<li>Widely supported and well-documented API</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">high performance and low latency (Performance: Excellent for high-performance computing scenarios where rapid access to data is required.)</span><br><span class="line"></span><br><span class="line">Pub/Sub System</span><br><span class="line">Data Persistence</span><br><span class="line">Advanced Data Structures</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Disadvantages-1"><a href="#Disadvantages-1" class="headerlink" title="Disadvantages"></a>Disadvantages</h2><ol>
<li>Limited durability compared to other protocols</li>
<li>May not be suitable for high-volume or complex data transfers</li>
<li>May require additional setup and configuration</li>
</ol>
<h2 id="Best-Use-Case-1"><a href="#Best-Use-Case-1" class="headerlink" title="Best Use Case"></a>Best Use Case</h2><p>Redis is best for fast, flexible, and scalable communication between microservices, especially as a cache or message broker.<br>It is also used for message brokering but in more data-centric applications like web applications, gaming, and real-time analytics.</p>
<p>Choose: You are developing applications that need rapid access to data with minimal latency. Your use case involves real-time analytics, gaming, or session management in web applications.</p>
<hr>
<h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><hr>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://blog.nonstopio.com/comparison-of-tcp-rmq-mqtt-redis-and-grpc-transport-layers-in-nest-js-microservices-2c10a2a98a6f">Comparison of TCP, (RMQ), MQTT, Redis, and gRPC transport layers in Nest.js microservices</a></li>
</ul>
]]></content>
      <categories>
        <category>Pub/Sub Messaging</category>
      </categories>
      <tags>
        <tag>MQTT</tag>
        <tag>Redis</tag>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/01/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Plotly - Basics</title>
    <url>/2023/08/03/Plotly-Basics/</url>
    <content><![CDATA[<blockquote>
<h3><i><font color=saddlebrown>If you work with massive datasets, <br>you can use a library like Plotly, designed to handle massive datasets well.</font></i></h3>
</blockquote>
<hr>
<h1 id="Before-Doing-Data-Visualization"><a href="#Before-Doing-Data-Visualization" class="headerlink" title="Before Doing Data Visualization"></a>Before Doing Data Visualization</h1><h2 id="Find-Datasets"><a href="#Find-Datasets" class="headerlink" title="Find Datasets"></a>Find Datasets</h2><ul>
<li><a href="https://www.kaggle.com/datasets">Kaggle Datasets</a></li>
<li><a href="https://datasetsearch.research.google.com/">Google Dataset Search</a></li>
<li><a href="https://data.gov.tw/">Taiwan Government’s Open Data</a></li>
<li><a href="https://data.gov/">The U.S. Government’s Open Data</a></li>
<li>…</li>
</ul>
<h2 id="Prepared-Environment"><a href="#Prepared-Environment" class="headerlink" title="Prepared Environment"></a>Prepared Environment</h2><ul>
<li>Install packages<ul>
<li>Plotly</li>
<li>Pandas</li>
<li><a href="https://jupyter.org/install">JupyterLab</a></li>
</ul>
</li>
</ul>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">$ pip install plotly==<span class="number">5.15</span>.<span class="number">0</span></span><br><span class="line">$ pip install pandas</span><br><span class="line">$ pip install jupyterlab</span><br><span class="line">$ jupyter lab</span><br></pre></td></tr></table></figure>

<h2 id="Load-Dataset"><a href="#Load-Dataset" class="headerlink" title="Load Dataset"></a>Load Dataset</h2><p>📘 Download <a href="https://www.kaggle.com/datasets/garrickhague/world-earthquake-data-from-1906-2022">World Earthquake Data From 1906-2022</a></p>
<ul>
<li><code>head()</code><ul>
<li>Shows the first n (the default is 5) rows</li>
</ul>
</li>
<li><code>tail()</code><ul>
<li>The “opposite” method of head() is tail()</li>
<li>Shows the last n (5 by default) rows of the dataframe object</li>
</ul>
</li>
<li><code>info()</code> <ul>
<li>Prints out a concise summary of the dataframe, including information about the index, data types, columns, non-null values, and memory usage</li>
</ul>
</li>
<li><code>describe()</code><ul>
<li>Generates descriptive statistics, including those that summarize the central tendency, dispersion, and shape of the dataset’s distribution</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Shows the first 5 rows</span></span><br><span class="line"><span class="built_in">print</span>(df.head())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Shows the last 5 rows</span></span><br><span class="line"><span class="built_in">print</span>(df.tail())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Concise summary of the dataframe</span></span><br><span class="line"><span class="built_in">print</span>(df.info())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Descriptive statistics</span></span><br><span class="line"><span class="built_in">print</span>(df.describe())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Save as `Year` field</span></span><br><span class="line">df[<span class="string">&#x27;Year&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;time&#x27;</span>]).dt.year</span><br><span class="line"></span><br><span class="line"><span class="comment"># Save as `Country` field</span></span><br><span class="line">df[<span class="string">&quot;Country&quot;</span>] = df[<span class="string">&quot;place&quot;</span>].<span class="built_in">str</span>.split(pat=<span class="string">&#x27;,&#x27;</span>, expand=<span class="literal">False</span>).<span class="built_in">str</span>.get(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p><em><font color=royalblue>After collection, most data requires some degree of cleaning or reformatting before it can be analyzed or used to create visualizations.</font></em></p>
<hr>
<h1 id="Getting-Started-Plotly"><a href="#Getting-Started-Plotly" class="headerlink" title="Getting Started - Plotly"></a>Getting Started - <a href="https://plotly.com/python/">Plotly</a></h1><h2 id="Line-Charts"><a href="#Line-Charts" class="headerlink" title="Line Charts"></a>Line Charts</h2><p>Line charts are used to convey changes over time.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line"></span><br><span class="line">df = px.data.gapminder().query(<span class="string">&quot;country==&#x27;Canada&#x27;&quot;</span>)</span><br><span class="line">fig = px.line(df, x=<span class="string">&quot;year&quot;</span>, y=<span class="string">&quot;lifeExp&quot;</span>, title=<span class="string">&#x27;Life expectancy in Canada&#x27;</span>)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line"></span><br><span class="line">df = px.data.gapminder().query(<span class="string">&quot;continent==&#x27;Oceania&#x27;&quot;</span>)</span><br><span class="line">fig = px.line(df, x=<span class="string">&quot;year&quot;</span>, y=<span class="string">&quot;lifeExp&quot;</span>, color=<span class="string">&#x27;country&#x27;</span>)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>

<h2 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h2><p>Use a histogram to visualize the frequency distribution of a single event over a certain time period.<br><em><font color=royalblue>A histogram is the graphical representation of quantitative data.</font></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line"></span><br><span class="line">df = px.data.tips()</span><br><span class="line">fig = px.histogram(df, x=<span class="string">&quot;total_bill&quot;</span>)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>

<h2 id="Bar-Charts"><a href="#Bar-Charts" class="headerlink" title="Bar Charts"></a>Bar Charts</h2><p><em><font color=royalblue>The bar chart is the graphical representation of categorical data.</font></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line"></span><br><span class="line">long_df = px.data.medals_long()</span><br><span class="line">fig = px.bar(long_df, x=<span class="string">&quot;nation&quot;</span>, y=<span class="string">&quot;count&quot;</span>, color=<span class="string">&quot;medal&quot;</span>, title=<span class="string">&quot;Long-Form Input&quot;</span>)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>

<h2 id="Scatter-Plots"><a href="#Scatter-Plots" class="headerlink" title="Scatter Plots"></a>Scatter Plots</h2><p>If you wanted to <strong>highlight the relationship or correlations between two variables</strong> (e.g. marketing spend and revenue, or hours of weekly exercise vs. cardiovascular fitness), you could use a scatter plot to see, at a glance, if one increases as the other decreases (or vice versa).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line">df[<span class="string">&#x27;Year&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;time&#x27;</span>]).dt.year</span><br><span class="line">fig = px.scatter(df, x=<span class="string">&quot;Year&quot;</span>, y=<span class="string">&quot;mag&quot;</span>)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>

<h2 id="Pie-chart"><a href="#Pie-chart" class="headerlink" title="Pie chart"></a>Pie chart</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line"></span><br><span class="line">df = px.data.tips()</span><br><span class="line">fig = px.pie(df, values=<span class="string">&#x27;tip&#x27;</span>, names=<span class="string">&#x27;day&#x27;</span>)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>

<h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw a map after doing `mag &gt;= 7` query</span></span><br><span class="line">fig = px.density_mapbox(df.query(<span class="string">&quot;mag &gt;= 7&quot;</span>), lat=<span class="string">&#x27;latitude&#x27;</span>, lon=<span class="string">&#x27;longitude&#x27;</span>, z=<span class="string">&#x27;mag&#x27;</span>, radius=<span class="number">10</span>,</span><br><span class="line">                        center=<span class="built_in">dict</span>(lat=<span class="number">0</span>, lon=<span class="number">180</span>), zoom=<span class="number">0</span>, mapbox_style=<span class="string">&quot;stamen-terrain&quot;</span>)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Do pre-processing on `place` field </span></span><br><span class="line">df[<span class="string">&quot;Country&quot;</span>] = df[<span class="string">&quot;place&quot;</span>].<span class="built_in">str</span>.split(pat=<span class="string">&#x27;,&#x27;</span>, expand=<span class="literal">False</span>).<span class="built_in">str</span>.get(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">fig = px.scatter_mapbox(df.query(<span class="string">&quot;mag &gt;= 7&quot;</span>), lat=<span class="string">&quot;latitude&quot;</span>, lon=<span class="string">&quot;longitude&quot;</span>, </span><br><span class="line">                        hover_name=<span class="string">&quot;Country&quot;</span>, hover_data=[<span class="string">&quot;mag&quot;</span>, <span class="string">&quot;depth&quot;</span>],</span><br><span class="line">                        color_discrete_sequence=[<span class="string">&quot;red&quot;</span>], zoom=<span class="number">3</span>, height=<span class="number">300</span>)</span><br><span class="line">fig.update_layout(mapbox_style=<span class="string">&quot;open-street-map&quot;</span>)</span><br><span class="line">fig.update_layout(margin=&#123;<span class="string">&quot;r&quot;</span>:<span class="number">0</span>,<span class="string">&quot;t&quot;</span>:<span class="number">0</span>,<span class="string">&quot;l&quot;</span>:<span class="number">0</span>,<span class="string">&quot;b&quot;</span>:<span class="number">0</span>&#125;)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://plotly.com/python/plotly-fundamentals/">Plotly Python Open Source Graphing Library Fundamentals</a></li>
<li><a href="https://www.datacamp.com/tutorial/python-plotly-express-tutorial">Python Plotly Express Tutorial: Unlock Beautiful Visualizations</a></li>
</ul>
]]></content>
      <tags>
        <tag>Data Visualization</tag>
        <tag>Python</tag>
        <tag>Plotly</tag>
      </tags>
  </entry>
  <entry>
    <title>Plotly - Advanced</title>
    <url>/2023/08/05/Plotly-Advanced/</url>
    <content><![CDATA[<h1 id="For-Example-Line-Plots"><a href="#For-Example-Line-Plots" class="headerlink" title="For Example: Line Plots"></a>For Example: Line Plots</h1><p>📘 Download <a href="https://www.kaggle.com/datasets/garrickhague/world-earthquake-data-from-1906-2022">World Earthquake Data From 1906-2022</a></p>
<hr>
<h2 id="Line-Plots-with-plotly-express"><a href="#Line-Plots-with-plotly-express" class="headerlink" title="Line Plots with plotly.express"></a>Line Plots with <code>plotly.express</code></h2><p><em><font color=royalblue>The plotly.express module (usually imported as px) contains functions that can create entire figures at once.<br>Plotly Express is a built-in part of the plotly library, and is the recommended starting point for creating most common figures.</font></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pre-processing</span></span><br><span class="line">df[<span class="string">&#x27;Year&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;time&#x27;</span>]).dt.year</span><br><span class="line">df[<span class="string">&quot;Country&quot;</span>] = df[<span class="string">&quot;place&quot;</span>].<span class="built_in">str</span>.split(pat=<span class="string">&#x27;,&#x27;</span>, expand=<span class="literal">False</span>).<span class="built_in">str</span>.get(-<span class="number">1</span>)</span><br><span class="line">df[<span class="string">&quot;Max_mag&quot;</span>] = df.groupby([<span class="string">&#x27;Year&#x27;</span>])[<span class="string">&#x27;mag&#x27;</span>].transform(<span class="built_in">max</span>)</span><br><span class="line"></span><br><span class="line">df = df.query(<span class="string">&quot;2012 &lt;= Year &lt;= 2022&quot;</span>)</span><br><span class="line">fig = px.line(df, x=<span class="string">&quot;Year&quot;</span>, y=<span class="string">&quot;Max_mag&quot;</span>, title=<span class="string">&#x27;Max magnitude from 2000 to 2022&#x27;</span>)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>

<ul>
<li>Explanation<ul>
<li><p>Pandas <code>groupby</code> splits all the records from your data set into different categories or groups and offers you flexibility to analyze the data by these groups.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Group by &#x27;Year&#x27;, and get the maximum of &#x27;mag&#x27; column</span></span><br><span class="line">df.groupby([<span class="string">&#x27;Year&#x27;</span>])[<span class="string">&#x27;mag&#x27;</span>].<span class="built_in">max</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Group by &#x27;Year&#x27;, get the maximum of &#x27;mag&#x27; column, and fit the length of dataframe  </span></span><br><span class="line">df.groupby([<span class="string">&#x27;Year&#x27;</span>])[<span class="string">&#x27;mag&#x27;</span>].transform(<span class="built_in">max</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Query &#x27;2022 &gt;= Year &gt;= 2021&#x27; and get the value of &#x27;Max_mag&#x27; column</span></span><br><span class="line">df.query(<span class="string">&quot;2022 &gt;= Year &gt;= 2021&quot;</span>)[<span class="string">&quot;Max_mag&quot;</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<hr>
<h2 id="Line-Plots-with-Column-Encoding-Color"><a href="#Line-Plots-with-Column-Encoding-Color" class="headerlink" title="Line Plots with Column Encoding Color"></a>Line Plots with Column Encoding Color</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pre-processing</span></span><br><span class="line">df[<span class="string">&#x27;Year&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;time&#x27;</span>]).dt.year</span><br><span class="line">df[<span class="string">&quot;Country&quot;</span>] = df[<span class="string">&quot;place&quot;</span>].<span class="built_in">str</span>.split(pat=<span class="string">&#x27;,&#x27;</span>, expand=<span class="literal">False</span>).<span class="built_in">str</span>.get(-<span class="number">1</span>)</span><br><span class="line">df[<span class="string">&quot;Max_mag&quot;</span>] = df.groupby([<span class="string">&#x27;Year&#x27;</span>, <span class="string">&#x27;magType&#x27;</span>])[<span class="string">&#x27;mag&#x27;</span>].transform(<span class="built_in">max</span>)</span><br><span class="line"></span><br><span class="line">df = df.query(<span class="string">&quot;2012 &lt;= Year &lt;= 2022&quot;</span>)</span><br><span class="line">fig = px.line(df, x=<span class="string">&quot;Year&quot;</span>, y=<span class="string">&quot;Max_mag&quot;</span>, </span><br><span class="line">  title=<span class="string">&#x27;Max magnitude from 2012 to 2022&#x27;</span>, color=<span class="string">&#x27;magType&#x27;</span>)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>

<ul>
<li>Explanation<ul>
<li><p>Pandas <code>groupby</code> splits all the records from your data set into different categories or groups and offers you flexibility to analyze the data by these groups.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Group by &#x27;Year&#x27; and &#x27;magType&#x27;, and get the maximum of &#x27;mag&#x27; column</span></span><br><span class="line">df.groupby([<span class="string">&#x27;Year&#x27;</span>, <span class="string">&#x27;magType&#x27;</span>])[<span class="string">&#x27;mag&#x27;</span>].<span class="built_in">max</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Group by &#x27;Year&#x27; and &#x27;magType&#x27;, get the maximum of &#x27;mag&#x27; column, and fit the length of dataframe  </span></span><br><span class="line">df.groupby([<span class="string">&#x27;Year&#x27;</span>, <span class="string">&#x27;magType&#x27;</span>])[<span class="string">&#x27;mag&#x27;</span>].transform(<span class="built_in">max</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Query &#x27;2022 &gt;= Year &gt;= 2021&#x27; and get the value of &#x27;Max_mag&#x27; column</span></span><br><span class="line">df.query(<span class="string">&quot;2022 &gt;= Year &gt;= 2021&quot;</span>)[<span class="string">&quot;Max_mag&quot;</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<hr>
<h2 id="Basic-Settings"><a href="#Basic-Settings" class="headerlink" title="Basic Settings"></a>Basic Settings</h2><h3 id="Line-charts-with-Markers"><a href="#Line-charts-with-Markers" class="headerlink" title="Line charts with Markers"></a>Line charts with Markers</h3><ul>
<li><p>Set Title</p>
<ul>
<li><code>title = &#39;Max magnitude and Min depth from 2012 to 2022&#39;</code></li>
</ul>
</li>
<li><p>Add one more field on text label</p>
<ul>
<li><p><code>text = &quot;Min_depth&quot;</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pre-processing</span></span><br><span class="line">df[<span class="string">&#x27;Year&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;time&#x27;</span>]).dt.year</span><br><span class="line">df[<span class="string">&quot;Country&quot;</span>] = df[<span class="string">&quot;place&quot;</span>].<span class="built_in">str</span>.split(pat=<span class="string">&#x27;,&#x27;</span>, expand=<span class="literal">False</span>).<span class="built_in">str</span>.get(-<span class="number">1</span>)</span><br><span class="line">df[<span class="string">&quot;Max_mag&quot;</span>] = df.groupby([<span class="string">&#x27;Year&#x27;</span>, <span class="string">&#x27;magType&#x27;</span>])[<span class="string">&#x27;mag&#x27;</span>].transform(<span class="built_in">max</span>)</span><br><span class="line">df[<span class="string">&quot;Min_depth&quot;</span>] = df.groupby([<span class="string">&#x27;Year&#x27;</span>, <span class="string">&#x27;magType&#x27;</span>])[<span class="string">&#x27;depth&#x27;</span>].transform(<span class="built_in">min</span>)</span><br><span class="line"></span><br><span class="line">query_df = df.query(<span class="string">&quot;2022 &gt;= Year &gt;= 2012 &amp; magType in [&#x27;mw&#x27;, &#x27;ml&#x27;, &#x27;ms&#x27;, &#x27;mb&#x27;]&quot;</span>)</span><br><span class="line">fig = px.line(query_df, x=<span class="string">&quot;Year&quot;</span>, y=<span class="string">&quot;Max_mag&quot;</span>, </span><br><span class="line">  title=<span class="string">&#x27;Max magnitude and Min depth from 2012 to 2022&#x27;</span>, </span><br><span class="line">  color=<span class="string">&#x27;magType&#x27;</span>, text=<span class="string">&quot;Min_depth&quot;</span>)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Mark data points</p>
<ul>
<li><p>Method 1: <code>markers = True</code></p>
</li>
<li><p>Method 2: <code>symbol = &quot;magType&quot;</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pre-processing</span></span><br><span class="line">df[<span class="string">&#x27;Year&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;time&#x27;</span>]).dt.year</span><br><span class="line">df[<span class="string">&quot;Country&quot;</span>] = df[<span class="string">&quot;place&quot;</span>].<span class="built_in">str</span>.split(pat=<span class="string">&#x27;,&#x27;</span>, expand=<span class="literal">False</span>).<span class="built_in">str</span>.get(-<span class="number">1</span>)</span><br><span class="line">df[<span class="string">&quot;Max_mag&quot;</span>] = df.groupby([<span class="string">&#x27;Year&#x27;</span>, <span class="string">&#x27;magType&#x27;</span>])[<span class="string">&#x27;mag&#x27;</span>].transform(<span class="built_in">max</span>)</span><br><span class="line"></span><br><span class="line">query_df = df.query(<span class="string">&quot;2022 &gt;= Year &gt;= 2012&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 1: markers</span></span><br><span class="line">fig = px.line(query_df, x=<span class="string">&quot;Year&quot;</span>, y=<span class="string">&quot;Max_mag&quot;</span>, </span><br><span class="line">  title=<span class="string">&#x27;Max magnitude from 2012 to 2022&#x27;</span>, </span><br><span class="line">  color=<span class="string">&#x27;magType&#x27;</span>, markers=<span class="literal">True</span>)</span><br><span class="line">fig.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 2: symbol</span></span><br><span class="line">fig = px.line(query_df, x=<span class="string">&quot;Year&quot;</span>, y=<span class="string">&quot;Max_mag&quot;</span>, </span><br><span class="line">  title=<span class="string">&#x27;Max magnitude from 2012 to 2022&#x27;</span>, </span><br><span class="line">  color=<span class="string">&#x27;magType&#x27;</span>, symbol=<span class="string">&quot;magType&quot;</span>)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Save-a-Plot"><a href="#Save-a-Plot" class="headerlink" title="Save a Plot"></a>Save a Plot</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"># Install Package</span><br><span class="line">$ pip install -U kaleido</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Save a Figure in xxx Format: PNG, JPEG, SVG, PDF</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># PNG</span></span><br><span class="line">fig.write_image(<span class="string">&quot;fig1.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># JPEG</span></span><br><span class="line">fig.write_image(<span class="string">&quot;fig1.jpeg&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># SVG</span></span><br><span class="line">fig.write_image(<span class="string">&quot;fig1.svg&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># PDF</span></span><br><span class="line">fig.write_image(<span class="string">&quot;fig1.pdf&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Change Image dimension and Scale</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig.write_image(<span class="string">&#x27;fig2_scale2.jpeg&#x27;</span>, width=<span class="number">600</span>, height=<span class="number">350</span>, scale=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Interactive HTML export in Plotly Python</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig.write_html(<span class="string">&quot;fig1.html&quot;</span>, auto_open=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="Advanced-Interactive-Custom-Controls"><a href="#Advanced-Interactive-Custom-Controls" class="headerlink" title="Advanced: Interactive Custom Controls"></a>Advanced: Interactive Custom Controls</h2><h3 id="Basic-Range-Slider-and-Range-Selectors"><a href="#Basic-Range-Slider-and-Range-Selectors" class="headerlink" title="Basic Range Slider and Range Selectors"></a>Basic Range Slider and Range Selectors</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load data</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pre-processing</span></span><br><span class="line">df[<span class="string">&#x27;Year&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;time&#x27;</span>]).dt.year</span><br><span class="line">df[<span class="string">&quot;Max_mag&quot;</span>] = df.groupby([<span class="string">&#x27;Year&#x27;</span>, <span class="string">&#x27;magType&#x27;</span>])[<span class="string">&#x27;mag&#x27;</span>].transform(<span class="built_in">max</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Query</span></span><br><span class="line">query_df = df.query(<span class="string">&quot;magType == &#x27;mww&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create figure</span></span><br><span class="line">fig = go.Figure()</span><br><span class="line"></span><br><span class="line">fig.add_trace(</span><br><span class="line">    go.Scatter(x=<span class="built_in">list</span>(query_df.time), y=<span class="built_in">list</span>(query_df.Max_mag)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set title</span></span><br><span class="line">fig.update_layout(</span><br><span class="line">    title_text=<span class="string">&quot;Time series with range slider and selectors&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add range slider</span></span><br><span class="line">fig.update_layout(</span><br><span class="line">    xaxis=<span class="built_in">dict</span>(</span><br><span class="line">        rangeselector=<span class="built_in">dict</span>(</span><br><span class="line">            buttons=<span class="built_in">list</span>([</span><br><span class="line">                <span class="built_in">dict</span>(count=<span class="number">1</span>, label=<span class="string">&quot;1m&quot;</span>, step=<span class="string">&quot;month&quot;</span>, stepmode=<span class="string">&quot;backward&quot;</span>),</span><br><span class="line">                <span class="built_in">dict</span>(count=<span class="number">6</span>, label=<span class="string">&quot;6m&quot;</span>, step=<span class="string">&quot;month&quot;</span>, stepmode=<span class="string">&quot;backward&quot;</span>),</span><br><span class="line">                <span class="built_in">dict</span>(count=<span class="number">1</span>, label=<span class="string">&quot;YTD&quot;</span>, step=<span class="string">&quot;year&quot;</span>, stepmode=<span class="string">&quot;todate&quot;</span>),</span><br><span class="line">                <span class="built_in">dict</span>(count=<span class="number">1</span>, label=<span class="string">&quot;1y&quot;</span>, step=<span class="string">&quot;year&quot;</span>, stepmode=<span class="string">&quot;backward&quot;</span>),</span><br><span class="line">                <span class="built_in">dict</span>(step=<span class="string">&quot;all&quot;</span>)</span><br><span class="line">            ])</span><br><span class="line">        ),</span><br><span class="line">        rangeslider=<span class="built_in">dict</span>( visible=<span class="literal">True</span> ),</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&quot;date&quot;</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://www.usgs.gov/programs/earthquake-hazards/magnitude-types">USGS - Magnitude Types</a></li>
<li><a href="https://academic-accelerator.com/encyclopedia/zh/moment-magnitude-scale">矩量級 Moment Magnitude Scale</a></li>
<li><a href="https://www.facebook.com/momlovestaiwan/photos/a.1076309132504673/1076350115833908/?type=3&locale=zh_TW">Magnitude Type: Mw vs. ML vs. MS vs. mb</a></li>
<li><a href="https://plotly.com/python/">Plotly Open Source Graphing Library for Python</a></li>
</ul>
]]></content>
      <tags>
        <tag>Data Visualization</tag>
        <tag>Python</tag>
        <tag>Plotly</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Visualization - Basics</title>
    <url>/2023/08/03/Data-Visualization-Basics/</url>
    <content><![CDATA[<h1 id="What-is-data-visualization"><a href="#What-is-data-visualization" class="headerlink" title="What is data visualization?"></a>What is data visualization?</h1><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>Data visualization (資料視覺化) is the graphical or visual representation of data.<br>It helps to highlight the most useful insights from a dataset, making it easier to spot trends, patterns, outliers, and correlations.</p>
<hr>
<h1 id="Two-main-types-of-data-visualization"><a href="#Two-main-types-of-data-visualization" class="headerlink" title="Two main types of data visualization"></a>Two main types of data visualization</h1><h2 id="1-Exploration"><a href="#1-Exploration" class="headerlink" title="1. Exploration"></a>1. Exploration</h2><p><em><font color=royalblue>Exploration takes place while you’re still analyzing the data.</font></em></p>
<ul>
<li>When faced with a new dataset, one of the first things you’ll do!</li>
<li>It helps you figure out what’s in your data.<ul>
<li>Get a sense of what’s in your dataset and to spot any noteworthy trends or anomalies. </li>
<li>Finding clues as to what the data might be trying to tell you.</li>
</ul>
</li>
</ul>
<h2 id="2-Explanation"><a href="#2-Explanation" class="headerlink" title="2. Explanation"></a>2. Explanation</h2><p><em><font color=royalblue>Explanatory visualization helps you to communicate what you’ve found.</font></em></p>
<ul>
<li>Once you’ve conducted your analysis and have figured out what the data is telling you, you’ll want to share these insights with others.</li>
<li>Help you tell the story, and it’s up to you to determine which visualizations will help you to do so most effectively.</li>
</ul>
<hr>
<h1 id="Five-types-of-data-visualization"><a href="#Five-types-of-data-visualization" class="headerlink" title="Five types of data visualization"></a>Five types of data visualization</h1><h2 id="1-Temporal-data-visualizations"><a href="#1-Temporal-data-visualizations" class="headerlink" title="1. Temporal data visualizations"></a>1. Temporal data visualizations</h2><ul>
<li>Linear and one-dimensional</li>
<li>e.g. scatterplots, timelines, line graphs</li>
</ul>
<img src="/2023/08/03/Data-Visualization-Basics/Temporal_data_viz.jpg" class="" title="Temporal data visualizations">

<h2 id="2-Hierarchical-visualizations"><a href="#2-Hierarchical-visualizations" class="headerlink" title="2. Hierarchical visualizations"></a>2. Hierarchical visualizations</h2><ul>
<li>Organize groups within larger groups</li>
<li>Often used to display clusters of information</li>
<li>e.g. tree diagrams, ring charts, sunburst diagrams</li>
</ul>
<img src="/2023/08/03/Data-Visualization-Basics/Hierarchical_viz.jpg" class="" title="Hierarchical visualizations">

<h2 id="3-Network-visualizations"><a href="#3-Network-visualizations" class="headerlink" title="3. Network visualizations"></a>3. Network visualizations</h2><ul>
<li>Show the relationships and connections between multiple datasets</li>
<li>e.g. matrix charts, word clouds, node-link diagrams</li>
</ul>
<img src="/2023/08/03/Data-Visualization-Basics/Network_viz.jpg" class="" title="Network visualizations">

<h2 id="4-Multidimensional-or-3D-visualizations"><a href="#4-Multidimensional-or-3D-visualizations" class="headerlink" title="4. Multidimensional or 3D visualizations"></a>4. Multidimensional or <a href="https://plotly.com/python/3d-charts/">3D visualizations</a></h2><ul>
<li>Depict two or more variables</li>
<li>e.g. pie charts, Venn diagrams, stacked bar graphs, histograms</li>
</ul>
<img src="/2023/08/03/Data-Visualization-Basics/Multidimensional_viz.jpg" class="" title="Multidimensional visualizations">

<h2 id="5-Geospatial-visualizations"><a href="#5-Geospatial-visualizations" class="headerlink" title="5. Geospatial visualizations"></a>5. Geospatial visualizations</h2><ul>
<li>Convey various data points in relation to physical, real-world locations</li>
<li>e.g. heat maps, cartograms, density maps</li>
</ul>
<img src="/2023/08/03/Data-Visualization-Basics/Geospatial_viz.jpg" class="" title="Geospatial visualizations">

<hr>
<h1 id="Popular-Python-Libraries-For-Data-Visualization"><a href="#Popular-Python-Libraries-For-Data-Visualization" class="headerlink" title="Popular Python Libraries For Data Visualization"></a>Popular Python Libraries For Data Visualization</h1><h2 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a><a href="https://matplotlib.org/">Matplotlib</a></h2><p>Matplotlib is an easy-to-use Python library for data visualization which is built on top of NumPy arrays.<br>It is a low-level module and provides a lot of flexibility but at the cost of writing more code. </p>
<h2 id="Seaborn"><a href="#Seaborn" class="headerlink" title="Seaborn"></a><a href="https://seaborn.pydata.org/">Seaborn</a></h2><p>Seaborn is a high-level library built on the top of Matplotlib which means that it can also use Matplotlib functions and classes.<br>This library provides default styles and color palettes to make a plot more attractive.</p>
<h2 id="Plotly"><a href="#Plotly" class="headerlink" title="Plotly"></a><a href="https://plotly.com/python/">Plotly</a></h2><p>Plotly has hover tool capabilities that allow us to detect any outliers or anomalies in a large number of data points.<br>It is visually attractive that can be accepted by a wide range of audiences.<br>It allows us for the endless customization of our graphs that makes our plot more meaningful and understandable for others.</p>
<h2 id="Other-Popular-Python-Libraries"><a href="#Other-Popular-Python-Libraries" class="headerlink" title="Other Popular Python Libraries"></a>Other Popular Python Libraries</h2><ul>
<li>Altair</li>
<li>Bokeh</li>
<li>Folium</li>
<li>Diagrams</li>
<li>Wordcloud</li>
<li>…</li>
</ul>
<hr>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://careerfoundry.com/en/blog/data-analytics/what-is-data-visualization/">What Is Data Visualization and Why Is It Important? A Complete Introduction</a></li>
<li><a href="https://www.geeksforgeeks.org/python-data-visualization-tutorial/">Python – Data visualization tutorial</a></li>
</ul>
]]></content>
      <tags>
        <tag>Data Visualization</tag>
        <tag>Introduction</tag>
      </tags>
  </entry>
  <entry>
    <title>從零開始學 Docker - 為何它這麼重要？(Part 3)</title>
    <url>/2024/04/02/%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B%E5%AD%B8-Docker-%E7%82%BA%E4%BD%95%E5%AE%83%E9%80%99%E9%BA%BC%E9%87%8D%E8%A6%81%EF%BC%9F-Part-3/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Docker 的三大功用：</span><br><span class="line">1. 簡化部署流程</span><br><span class="line">2. 跨平台部署</span><br><span class="line">3. 建立乾淨測試環境</span><br></pre></td></tr></table></figure>

<h1 id="功用三：建立乾淨測試環境"><a href="#功用三：建立乾淨測試環境" class="headerlink" title="功用三：建立乾淨測試環境"></a>功用三：建立乾淨測試環境</h1><h2 id="觀念解說"><a href="#觀念解說" class="headerlink" title="觀念解說"></a>觀念解說</h2><hr>
<h1 id="實作示範"><a href="#實作示範" class="headerlink" title="實作示範"></a>實作示範</h1><p>本章節示範內容：建立乾淨的測試環境。<br>利用 Dockerfile 建立一份客製映像檔（Docker Image），並把測試環境跑起來。</p>
<h2 id="準備-MongoDB-Container"><a href="#準備-MongoDB-Container" class="headerlink" title="準備 MongoDB Container"></a>準備 MongoDB Container</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker network create test_network</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d --name mongodb --network test_network bessyhuang/py3.10_mongo:v1</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it mongodb bash</span></span><br></pre></td></tr></table></figure>

<h2 id="準備-Django-Platform-Container"><a href="#準備-Django-Platform-Container" class="headerlink" title="準備 Django Platform Container"></a>準備 Django Platform Container</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -it -p 8001:8000 -v /Users/bessyhuang/Downloads/TEST_mysite/esiot-platform:/home/ --network test_network --name podman_platform python:3.11.8-slim bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt update</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt install gcc python3-dev -y</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pip install -r py3.11.8_requirements.txt</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">python manage.py runserver 0.0.0.0:8000</span></span><br></pre></td></tr></table></figure>



<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.11</span>.<span class="number">8</span>-slim</span><br><span class="line"><span class="keyword">MAINTAINER</span> Bessy</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./mysite ./home/</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /home/mysite</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install iproute2 -y &amp;&amp; apt-get install vim -y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;manage.py&quot;</span>, <span class="string">&quot;runserver&quot;</span>]</span></span><br></pre></td></tr></table></figure>


<p>Example</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM alpine:latest</span><br><span class="line">ENV myworkdir /var/www/localhost/htdocs/</span><br><span class="line">ARG whoami=Bessy</span><br><span class="line">WORKDIR $&#123;myworkdir&#125;</span><br><span class="line">RUN apk --update add apache2</span><br><span class="line">RUN rm -rf /var/cache/apk/*</span><br><span class="line">RUN echo &quot;&lt;h3&gt;I am $&#123;whoami&#125;. I am taking this great Docker Course. Round 01&lt;/h3&gt;&quot; &gt;&gt; index.html</span><br><span class="line">RUN echo &quot;&lt;h3&gt;I am $&#123;whoami&#125;. I am taking this great Docker Course. Round 02&lt;/h3&gt;&quot; &gt;&gt; index.html</span><br><span class="line">RUN echo &quot;&lt;h3&gt;I am $&#123;whoami&#125;. I am taking this great Docker Course. Round 03&lt;/h3&gt;&quot; &gt;&gt; index.html</span><br><span class="line">COPY ./content.txt ./</span><br><span class="line">RUN ls -l ./</span><br><span class="line">RUN cat ./content.txt &gt;&gt; index.html</span><br><span class="line">ENTRYPOINT [&quot;httpd&quot;, &quot;-D&quot;, &quot;FOREGROUND&quot;]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>觀念解說</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo | Getting Started</title>
    <url>/2024/03/18/Hexo-Getting-Started/</url>
    <content><![CDATA[<h1 id="建立一個新的-Hexo-網站"><a href="#建立一個新的-Hexo-網站" class="headerlink" title="建立一個新的 Hexo 網站"></a>建立一個新的 Hexo 網站</h1><h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-cli -g</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install -g npm@10.5.0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果要把 Hexo deploy 到 Github 上面，需要先安裝 <code>hexo-deployer-git</code>。<ul>
<li>相關設定，請參考 <a href="https://ithelp.ithome.com.tw/articles/10257569">建立自己Blog系列(三) Hexo next theme 介紹</a>。</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-deployer-git --save</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nano _config.yml</span></span><br></pre></td></tr></table></figure>

<h2 id="網站初始化"><a href="#網站初始化" class="headerlink" title="網站初始化"></a>網站初始化</h2><p>如果沒有設定 folder 的話，Hexo 會在目前的資料夾建立網站。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo init myblog</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> myblog/</span></span><br></pre></td></tr></table></figure>

<h2 id="新增一篇-Post"><a href="#新增一篇-Post" class="headerlink" title="新增一篇 Post"></a>新增一篇 Post</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new <span class="string">&quot;Hexo | Getting Started&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim <span class="built_in">source</span>/_posts/Hexo-Getting-Started.md</span></span><br></pre></td></tr></table></figure>

<h2 id="啟動伺服器"><a href="#啟動伺服器" class="headerlink" title="啟動伺服器"></a>啟動伺服器</h2><p>預設是 <a href="http://localhost:4000/">http://localhost:4000/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo server</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo s</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="部署三部曲"><a href="#部署三部曲" class="headerlink" title="部署三部曲"></a>部署三部曲</h1><ol>
<li><p>清除快取檔案 (db.json) 和已產生的靜態檔案 (public)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo clean</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo cl</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>產生靜態檔案 (部署網站前先產生靜態檔案)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo generate</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo g</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>部署網站</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo deploy</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo d</span></span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h1 id="Clone-Run-your-Repository"><a href="#Clone-Run-your-Repository" class="headerlink" title="Clone &amp; Run your Repository"></a>Clone &amp; Run your Repository</h1><h2 id="Repository-跑起來"><a href="#Repository-跑起來" class="headerlink" title="Repository 跑起來"></a>Repository 跑起來</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/bessyhuang/bessyhuang.github.io.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> bessyhuang.github.io/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout backup</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo server</span></span><br></pre></td></tr></table></figure>

<h2 id="備份於-GitHub-Repository-的-backup-分支"><a href="#備份於-GitHub-Repository-的-backup-分支" class="headerlink" title="備份於 GitHub Repository 的 backup 分支"></a>備份於 GitHub Repository 的 <code>backup 分支</code></h2><ul>
<li>git checkout<ul>
<li>切換分支。Switch branches or restore working tree files</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout backup</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add --all</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;New function or something modified&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push --set-upstream origin backup</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://hexo.io/zh-tw/docs/commands.html">Hexo 指令</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10257569">建立自己Blog系列(三) Hexo next theme 介紹</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10308093">CI&#x2F;CD X Jenkins、CircleCI、Github Action (28)</a></li>
<li><a href="https://blog.marsen.me/2022/09/26/2022/Hexo_CICD/">[實作筆記] Hexo CI&#x2F;CD 設置</a></li>
<li><a href="https://anemology.cc/post/hexo-backup/">Hexo 備份至 GitHub</a></li>
<li><a href="https://afun.tw/blog/20201114-hexo-init-github-page/">Hexo - 基本設定與 GitHub Page 發佈流程</a></li>
<li><a href="https://op30132.github.io/2019/12/24/hexo-tag-page/">hexo 新增 tag、catagories、about等頁面</a></li>
</ul>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>從零開始學 Docker - 為何它這麼重要？(Part 1)</title>
    <url>/2024/01/30/%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B%E5%AD%B8-Docker-%E7%82%BA%E4%BD%95%E5%AE%83%E9%80%99%E9%BA%BC%E9%87%8D%E8%A6%81%EF%BC%9F-Part-1/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Docker 的三大功用：</span><br><span class="line">1. 簡化部署流程</span><br><span class="line">2. 跨平台部署</span><br><span class="line">3. 建立乾淨測試環境</span><br></pre></td></tr></table></figure>

<h1 id="功用一：簡化部署流程"><a href="#功用一：簡化部署流程" class="headerlink" title="功用一：簡化部署流程"></a>功用一：簡化部署流程</h1><h2 id="觀念解說"><a href="#觀念解說" class="headerlink" title="觀念解說"></a>觀念解說</h2><p>如果沒有使用 Docker，當你需要將應用程式部署到多台伺服器上時，必須逐一輸入指令進行設定。這不僅在環境安裝階段耗費大量時間且枯燥乏味，還容易因人為失誤而輸入錯誤指令。更重要的是，若需要在不同環境中進行部署，還得應對各種環境變數和配置的複雜性。</p>
<p>Docker 的推出為我們提供了一套強大的容器化解決方案。</p>
<p>透過使用 Docker，我們能夠將應用程式及其相依的環境、套件等打包成一個獨立、可攜帶的容器。這樣一來，無論在何處都能確保應用程式以相同的方式運行，避免受到不同環境的影響。</p>
<p>這種容器化的方法使得應用程式的部署和管理變得更加靈活、簡便，同時提供了更高度的一致性和可攜性。</p>
<hr>
<h1 id="實作示範"><a href="#實作示範" class="headerlink" title="實作示範"></a>實作示範</h1><h2 id="建立一個映像檔（Docker-Image）"><a href="#建立一個映像檔（Docker-Image）" class="headerlink" title="建立一個映像檔（Docker Image）"></a>建立一個映像檔（Docker Image）</h2><p>Docker Image 就像是一個獨立、可攜帶的程式部署包，其中包含了應用程式（在這個範例中是 Django 網站）以及它所需要的環境、套件等資源，都被一併打包在一起。</p>
<h3 id="Start-a-Docker-Container"><a href="#Start-a-Docker-Container" class="headerlink" title="Start a Docker Container"></a>Start a Docker Container</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker pull python:3.12-alpine</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --name mysite -it -p 8000:8000 python:3.12-alpine /bin/sh</span></span><br><span class="line">/ #</span><br></pre></td></tr></table></figure>

<h3 id="Install-packages-in-a-Docker-Container"><a href="#Install-packages-in-a-Docker-Container" class="headerlink" title="Install packages in a Docker Container"></a>Install packages in a Docker Container</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/ # apk update</span><br><span class="line">/ # apk add vim</span><br><span class="line">/ # pip install django</span><br></pre></td></tr></table></figure>

<h3 id="Create-a-Django-website-in-a-Docker-Container"><a href="#Create-a-Django-website-in-a-Docker-Container" class="headerlink" title="Create a Django website in a Docker Container"></a>Create a Django website in a Docker Container</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/     # cd /home/</span><br><span class="line">/home # django-admin startproject mysite</span><br><span class="line">/home # cd mysite/</span><br><span class="line">/home/mysite # django-admin startapp app1</span><br></pre></td></tr></table></figure>

<h3 id="Django-Settings"><a href="#Django-Settings" class="headerlink" title="Django Settings"></a>Django Settings</h3><ul>
<li><code>mysite/settings.py</code>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">       <span class="comment">#...</span></span><br><span class="line">       <span class="string">&#x27;app1&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
<li><code>mysite/urls.py</code>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path <span class="keyword">as</span> url</span><br><span class="line"><span class="keyword">from</span> app1.views <span class="keyword">import</span> hello_world</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">       <span class="comment">#...</span></span><br><span class="line">       url(<span class="string">r&#x27;^hello/$&#x27;</span>, hello_world),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
<li><code>app1/views.py</code>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>(<span class="params">request</span>):</span><br><span class="line">       <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;Hello, World.&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Run-a-Django-website-in-a-Docker-Container"><a href="#Run-a-Django-website-in-a-Docker-Container" class="headerlink" title="Run a Django website in a Docker Container"></a>Run a Django website in a Docker Container</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/home/mysite # python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Open your browser: <a href="http://localhost:8000/hello/">http://localhost:8000/hello/</a></p>
<img src="/2024/01/30/%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B%E5%AD%B8-Docker-%E7%82%BA%E4%BD%95%E5%AE%83%E9%80%99%E9%BA%BC%E9%87%8D%E8%A6%81%EF%BC%9F-Part-1/hello_world.jpg" class="" title="Hello, World.">
</blockquote>
<h3 id="Create-a-new-image-from-a-container’s-changes"><a href="#Create-a-new-image-from-a-container’s-changes" class="headerlink" title="Create a new image from a container’s changes"></a>Create a new image from a container’s changes</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">ls</span> -a</span></span><br><span class="line">CONTAINER ID   IMAGE                COMMAND     CREATED          STATUS                      PORTS     NAMES</span><br><span class="line">dbd03d68bf0d   python:3.12-alpine   &quot;/bin/sh&quot;   32 minutes ago   Exited (0) 10 seconds ago             mysite</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker commit dbd03d68bf0d  django_site:v1</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker images</span></span><br><span class="line">REPOSITORY    TAG           IMAGE ID       CREATED         SIZE</span><br><span class="line">django_site   v1            5499518614d6   2 seconds ago   136MB</span><br><span class="line">python        3.12-alpine   d2cfe5300063   5 weeks ago     56.4MB</span><br></pre></td></tr></table></figure>

<h2 id="部署一個-Django-網站"><a href="#部署一個-Django-網站" class="headerlink" title="部署一個 Django 網站"></a>部署一個 Django 網站</h2><h3 id="Use-a-Docker-Image-to-create-a-Docker-Container"><a href="#Use-a-Docker-Image-to-create-a-Docker-Container" class="headerlink" title="Use a Docker Image to create a Docker Container"></a>Use a Docker Image to create a Docker Container</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --name mysite_002 -it -p 8000:8000 django_site:v1 /bin/sh</span></span><br><span class="line">/ # cd home/mysite/</span><br><span class="line">/home/mysite # python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure>

<blockquote>
<p>哇！只要三行指令，就能把事先打包好的 Django 網站建立起來了～<br>Open your browser: <a href="http://localhost:8000/hello/">http://localhost:8000/hello/</a><br>PS. 後續還有更進階的部署作法，像是 Dockerfile、Docker Compose 喔！</p>
</blockquote>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>觀念解說</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>從零開始學 Docker - 為何它這麼重要？(Part 2)</title>
    <url>/2024/02/04/%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B%E5%AD%B8-Docker-%E7%82%BA%E4%BD%95%E5%AE%83%E9%80%99%E9%BA%BC%E9%87%8D%E8%A6%81%EF%BC%9F-Part-2/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Docker 的三大功用：</span><br><span class="line">1. 簡化部署流程</span><br><span class="line">2. 跨平台部署</span><br><span class="line">3. 建立乾淨測試環境</span><br></pre></td></tr></table></figure>

<h1 id="功用二：跨平台部署"><a href="#功用二：跨平台部署" class="headerlink" title="功用二：跨平台部署"></a>功用二：跨平台部署</h1><h2 id="觀念解說"><a href="#觀念解說" class="headerlink" title="觀念解說"></a>觀念解說</h2><p>Docker 的強大功能之一是「跨平台部署」！透過把程式及其相依的環境、套件打包成 Docker Image（aka. 程式部署包），你可以輕鬆地在不同作業系統上（Linux、MacOS 或 Windows）運行你的應用程式。</p>
<p>完成 Docker Image 的製作後，成功上傳至 Docker Hub（aka. 存放 Docker Image 的雲端空間），使其他使用者能夠在全球的任何地方、任何作業系統上輕鬆進行下載。隨後，透過在各自作業系統上安裝 Docker Engine，可以協調作業系統與 Docker 容器之間的運行，而無需擔心環境相容性問題。</p>
<p>簡言之，Docker 讓跨平台部署變得快速、便捷，確保了一致的部署體驗。</p>
<hr>
<h1 id="實作示範"><a href="#實作示範" class="headerlink" title="實作示範"></a>實作示範</h1><p>本章節示範內容：部署一個 Django Website 於不同作業系統上。<br>藉由撰寫 Dockerfile 來建立 Docker Image，並且將製作好的 Docker Image 上傳至 Docker Hub，以便進行跨平台部署。</p>
<h2 id="準備-Django-Website"><a href="#準備-Django-Website" class="headerlink" title="準備 Django Website"></a>準備 Django Website</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">django-admin startproject mysite</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> mysite</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">django-admin startapp app1</span></span><br></pre></td></tr></table></figure>

<p>網站的階層架構，如下所示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">└── mysite/</span><br><span class="line">    ├── app1/</span><br><span class="line">    │   ├── __init__.py</span><br><span class="line">    │   ├── admin.py</span><br><span class="line">    │   ├── apps.py</span><br><span class="line">    │   ├── models.py</span><br><span class="line">    │   ├── tests.py</span><br><span class="line">    │   └── views.py</span><br><span class="line">    ├── manage.py</span><br><span class="line">    └── mysite/</span><br><span class="line">        ├── __init__.py</span><br><span class="line">        ├── asgi.py</span><br><span class="line">        ├── settings.py</span><br><span class="line">        ├── urls.py</span><br><span class="line">        └── wsgi.py</span><br></pre></td></tr></table></figure>

<h3 id="mysite-settings-py"><a href="#mysite-settings-py" class="headerlink" title="mysite&#x2F;settings.py"></a>mysite&#x2F;settings.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#...</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line">    <span class="string">&#x27;app1&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="mysite-urls-py"><a href="#mysite-urls-py" class="headerlink" title="mysite&#x2F;urls.py"></a>mysite&#x2F;urls.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"><span class="keyword">from</span> app1.views <span class="keyword">import</span> hello_world</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^hello/$&#x27;</span>, hello_world),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="app1-views-py"><a href="#app1-views-py" class="headerlink" title="app1&#x2F;views.py"></a>app1&#x2F;views.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="撰寫-Dockerfile"><a href="#撰寫-Dockerfile" class="headerlink" title="撰寫 Dockerfile"></a>撰寫 Dockerfile</h2><p>Dockerfile 是用於建置 Docker Image 的腳本。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.10</span>-alpine</span><br><span class="line"><span class="keyword">ENV</span> myworkdir /home/django_site</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$&#123;myworkdir&#125;</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./mysite/ <span class="variable">$&#123;myworkdir&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install django</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;manage.py&quot;</span>, <span class="string">&quot;runserver&quot;</span>, <span class="string">&quot;0.0.0.0:8000&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h2 id="建立-Docker-Image"><a href="#建立-Docker-Image" class="headerlink" title="建立 Docker Image"></a>建立 Docker Image</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">└── site/</span><br><span class="line">   ├── Dockerfile</span><br><span class="line">   └── mysite/</span><br><span class="line">        ├── app1/</span><br><span class="line">        │    ├── ...</span><br><span class="line">        ├── manage.py</span><br><span class="line">        └── mysite/</span><br><span class="line">             ├── ...</span><br></pre></td></tr></table></figure>

<p>cd 到有 <code>Dockerfile</code> 的目錄下。接著，建立名為 <code>django_site</code> 的 Docker Image。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> site/</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build -t bessyhuang/django_site . --no-cache</span></span><br></pre></td></tr></table></figure>

<h2 id="執行"><a href="#執行" class="headerlink" title="執行"></a>執行</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d -p 8001:8000 django_site</span> </span><br></pre></td></tr></table></figure>
<p>打開瀏覽器 <a href="http://localhost:8001/hello/">http://localhost:8001/hello/</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>觀念解說</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
</search>
